#!/usr/bin/perl



=head1 No ledge
Structured knowledge database in a wiki-like HTML format.

=over
=item -
Requires a single directory as cmd-line argument.
This directory is transversed recursively and whenever a pair of files
"content.tex" (LaTex) and "graph.gv" (GraphViz) is found, an HTML (+CSS) page is generated.

=item -
Both the tex and the graph can be any valid document supported by LaTex and GraphViz.

=item -
The user can insert hyperlinks in the tex file (LaTex package hyperref) and the graph (URL attribute)
that point to other entries.
Note that by default, a local, relative path is assumed, use file:// and https:// for more control.

=back
=cut



# Imports
use warnings;
use strict;
use File::Find;
use File::Copy;
use File::Path 'make_path';
use File::Temp 'tempdir';
use File::Basename;
use File::Spec::Functions 'catfile', 'rel2abs', 'abs2rel';
use Cwd 'realpath';
use FindBin;
use lib $FindBin::Bin;
use MovePaths;



# Parse cmd line arguments
if (scalar(@ARGV) == 1) {
	# Is directory?
	-d $ARGV[0] or die "Single argument must be a directory";
	# Walk directory and build entries
	find(\&build_entry, ( rel2abs($ARGV[0]) ));
}
elsif (scalar(@ARGV) == 4 and $ARGV[0] eq "move") {
	(-d $ARGV[1] and ! -e $ARGV[2]) or die "Source must be directory and target must be non-existent";
	# Adjust paths in entry
	move_entry(rel2abs($ARGV[1]), rel2abs($ARGV[2]), rel2abs($ARGV[3]));
	# Adjust paths in all other entries
}
elsif (scalar(@ARGV) >= 3 and $ARGV[0] eq "find") {
	
}
else {
	die "Please provide appropriate command line arguments";
}



# Subroutines

sub move_entry {
	# Get arguments
	my ($source, $target, $root) = @_;
	$source = realpath($source);
	$target = realpath($target);
	$root = realpath($root);

	find(MovePaths::subroutine_for_find("entry\\.html", $source, $target, \&separators), ($root));
	make_path(dirname($target));
	move($source, $target);
}

sub separators {
	my $ext;
	{
		my ($name) = @_;
		$name =~ /\.([^.]+)$/;
		$ext = $1;
	}

	my $start;
	my $end;
	if ($ext eq "tex") {
		$start = "\{";
		$end = "\}";
	}
	elsif ($ext =~ /(gv|map|html)/) {
		$start = "\"";
		$end = "\"";
	}
	elsif ($ext =~ /(svg|css)/) {
		system("touch ${File::Find::name}");
	}
	else {
		return;
	}
	return ($start, $end);
}


=item build_entry()
Routine to generate an HTML (+CSS) entry from a tex and gv file.
Should be used with File::Find::find.
=cut
sub build_entry {

	my $dir = $File::Find::dir;
	my $wd = $File::Find::name;
	(-d $wd) or return;
	chdir($wd);

	# Check if directory contains required files
	unless (-f "content.tex" and -f "graph.gv") {
		chdir($dir);
		return;
	}

	# Defines
	my $msg = "Error processing \"$wd\":";

	# Check what was changed; for later use
	my $graph_changed;
	{
		my $age = -M "graph.gv";
		$graph_changed = !(
			(-f "graph.svg" and $age >= -M "graph.svg") and
			(-f "graph.map" and $age >= -M "graph.map")
		);
	}
	my $content_changed;
	{
		my $age = -M "content.tex";
		$content_changed = !(
			(-f "entry.html" and $age >= -M "entry.html") and
			(-f "entry.css" and $age >= -M "entry.css")
		);
	}

	# Check if something must be done
	($content_changed or $graph_changed) or (chdir($dir) and return);



	# Compile graph
	if ($graph_changed) {
		if (
		system("dot -Tsvg graph.gv -o graph.svg") or
		system("dot -Tcmapx graph.gv -o graph.map")
		) {
			die "$msg Could not compile \"graph.gv\".";
		}
	}
	# Read code of graph map for later integration into the html
	my $graphmap;
	{
		open(FH, "<", "graph.map") or die "$msg Could not open graph map file";
		read(FH, $graphmap, -s FH);
		close(FH);
		$graphmap =~ s/\s+$//; # Strip right
	}



	# Compile tex
	my $csscode;
	my $htmlcode;
	if ($content_changed) {
		# Move to a temporary directory
		my $tmp = tempdir(CLEANUP => 1);
		chdir($tmp);
		# Run htlatex
		my $contentpath = catfile($wd, 'content.tex');
		if (system("make4ht $contentpath -f html5+tidy \"mathml\"")) {
			die "$msg Could not compile \"content.tex\"";
		}
		# Note that output files are named like the input tex file, i.e. "content"
		# Read content.css
		open(FH, "<", "content.css") or die "$msg Could not open content css file";
		read(FH, $csscode, -s FH);
		close(FH);
		# Read content.html
		open(FH, "<", "content.html") or die "$msg Could not open content html file";
		read(FH, $htmlcode, -s FH);
		close(FH);
		$htmlcode =~ s/content\.css/entry.css/;
		# Reset working directory
		chdir($wd);
	}
	else {
		# Read entry.css
		open(FH, "<", "entry.css") or die "$msg Could not open content css file";
		read(FH, $csscode, -s FH);
		close(FH);
		# Read entry.html
		open(FH, "<", "entry.html") or die "$msg Could not open content html file";
		read(FH, $htmlcode, -s FH);
		close(FH);
	}



	# Build full html
	# Content changed, adjust html and css
	if ($content_changed) {
		# Insert modifications
		{
			# Pick third last line
			my $i = length($csscode);
			for (1..3) {
				$i = rindex($csscode, "\n", $i-1);
			}
			substr($csscode, $i, 0) =
				"\n.content {\n".
				"	width: 60%;\n".
				"	margin-right: auto;\n".
				"	margin-left: auto;\n".
				"	margin-bottom: 4cm\n".
				"}\n".
				".graph {\n".
				"	display: block;\n".
				"	margin-right: auto;\n".
				"	margin-left: auto;\n".
				"	margin-bottom: 4cm\n".
				"}";

			# Write to file
			open(FH, ">", "entry.css") or die "$msg Could not write css file";
			print FH $csscode;
			close(FH)
		}

		# In html, add divider for content
		my $keyword = "<body>";
		my $i = index($htmlcode, $keyword) + length($keyword) + 1; # 1 for newline
		substr($htmlcode, $i, 0) = "<div class=\"content\">\n";
		$i = rindex($htmlcode, "</body>") - 1; # 1 for newline
		substr($htmlcode, $i, 0) = "\n</div>";
	}



	# Content or graph changed, add graph to html
	if ($content_changed or $graph_changed) {
		my $j = rindex($htmlcode, "</body>") - 1; # 1 for newline;
		my $i = $j;
		# If content did not change, search for another delimiter
		unless ($content_changed) {
			my $keyword = "</div>";
			$i = rindex($htmlcode, $keyword, $j-1) + length($keyword);
			# No +-1 because newline is removed here, since added below
		}
		# Insert (content changed) or replace
		# (content did not change and map from previous compilation is present)
		substr($htmlcode, $i, $j-$i) =
		"\n<IMG SRC=\"graph.svg\" USEMAP=\"\#G\" class=\"graph\">".
		"\n$graphmap";

		# Write to file
		open(FH, ">", "entry.html") or die "$msg Could not write html file";
		print FH $htmlcode;
		close(FH)
	}

	# Reset working dir
	chdir($dir);
}

